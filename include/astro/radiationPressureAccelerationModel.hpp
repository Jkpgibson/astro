/*
 * Copyright (c) 2014-2018 Kartik Kumar (me@kartikkumar.com)
 * Copyright (c) 2014-2016 Marko Jankovic, DFKI GmbH
 * Copyright (c) 2014-2016 Natalia Ortiz, University of Southampton
 * Copyright (c) 2014-2016 Juan Romero, University of Strathclyde
 * Distributed under the MIT License.
 * See accompanying file LICENSE.md or copy at http://opensource.org/licenses/MIT
 */

#ifndef ASTRO_RADIATION_PRESSURE_ACCELERATION_MODEL_HPP
#define ASTRO_RADIATION_PRESSURE_ACCELERATION_MODEL_HPP

#include "astro/constants.hpp"

namespace astro
{

//! Compute radiation pressure for complete absorption.
/*!
 * Computes radiation pressure for complete absorption from a given energy flux:
 *
 * \f[
 *      P = \frac{W}{c}
 * \f]
 *
 * where \f$P\f$ is the computed radiation pressure, \f$W\f$ is the energy flux, and \f$c\f$ is the
 * speed of light.
 *
 * @tparam    Real                            Floating-point type
 * @param[in] energyFlux                      Energy flux generated by source, i.e., Sun    [W m^-2]
 * @return                                    Computed radiation pressure                   [N m^-2]
 */
template< typename Real >
Real computeAbsorptionRadiationPressure( const Real energyFlux )
{
  return energyFlux / ASTRO_SPEED_OF_FLIGHT;
}

//! Compute radiation pressure.
/*!
 * Computes radiation pressure at a specified distance from the source, e.g., the Sun, by scaling
 * with respect to a given reference. Typically, the reference is taken to be the average energy
 * flux at Earth, i.e., approximately 1 AU.
 *
 * Since the flux is inversely proportional to the square of the distance, the radiation presurre
 * at a given distance is computed using the following equation:
 *
 * \f[
 *      P = P_{ref} \frac{R_{ref}^{2}}{R^{2}}
 * \f]
 *
 * where \f$P\f$ is the computed radiation pressure, \f$P_{ref}\f$ is the reference radiation
 * pressure, \f$R_{ref}\f$ is the reference distance, and \f$R\f$ is the specified distance.
 *
 * The distances can be given in any units, so long as they are both in the same units.
 *
 * @tparam    Real                            Floating-point type
 * @param[in] referenceRadiationPressure      Reference radiation pressure                  [N m^-2]
 * @param[in] referenceDistance               Reference distance                                [AU]
 * @param[in] distance                        Given distance from the Sun                       [AU]
 * @return                                    Radiation pressure at given distance          [N m^-2]
 */
template< typename Real >
Real computeRadiationPressure( const Real referenceRadiationPressure,
                               const Real referenceDistance,
                               const Real distance )
{
    return referenceRadiationPressure
        * ( referenceDistance * referenceDistance / ( distance * distance ) );
}

//! Compute radiation pressure acceleration for a cannonball.
/*!
 * Compute radiation pressure acceleration for a canonball model. The model for the radiation
 * pressure acceleration is given by (Montenbruck, 2000):
 *
 * \f[
 *      a =  -P  C_{R}  \frac{3}{r\rho} \vec{u}
 * \f]
 *
 * where \f$P\f$ is the radiation pressure at a specified distance from the source, \f$C_{R}\f$ is
 * the radiation pressure coefficient (\f$C_{R} = 1\f$ for complete absorption and \f$C_{R} = 2\f$
 * for specular reflection), \f$ \pi r^2 \f$ is the radius of the sphere, \f$ \rho \f$ is the
 * bulk density of the sphere, and \f$ \vec{u} \f$ is the unit vector pointing from the source of
 * the radiation pressure, e.g., the Sun.
 *
 * @tparam    Real                            Floating-point type
 * @tparam    Vector3                         3-vector type
 * @param[in] radiationPressure               Radiation pressure                            [N m^-2]
 * @param[in] radiationPressureCoefficient    Radiation pressure coefficient                     [-]
 * @param[in] unitVectorToSource              Unit vector pointing from radiation source         [-]
 * @param[in] radius                          Radius of sphere                                   [m]
 * @param[in] bulkDensity                     Bulk density of sphere                       [kg m^-3]
 * @return                                    Computed radiation pressure acceleration      [m s^-2]
 */
template< typename Real, typename Vector3 >
Vector3 computeRadiationPressureAcceleration( const Real     radiationPressure,
                                              const Real     radiationPressureCoefficient,
                                              const Vector3& unitVectorToSource,
                                              const Real     radius,
                                              const Real     bulkDensity )
{
    Vector3 acceleration = unitVectorToSource;

    const Real preMultiplier = -radiationPressure
                               * radiationPressureCoefficient
                               * 3.0 / ( radius * bulkDensity );

    acceleration[ 0 ] = preMultiplier * unitVectorToSource[ 0 ];
    acceleration[ 1 ] = preMultiplier * unitVectorToSource[ 1 ];
    acceleration[ 2 ] = preMultiplier * unitVectorToSource[ 2 ];

    return acceleration;
}

} // namespace astro

#endif // ASTRO_RADIATION_PRESSURE_ACCELERATION_MODEL_HPP
